package dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import model.RevenueItem;

public class SalesDao {

    private List<RevenueItem> getDummyRevenueItems()
    {
        List<RevenueItem> items = new ArrayList<RevenueItem>();

		/*Sample data begins*/
        for (int i = 0; i < 10; i++) {
            RevenueItem item = new RevenueItem();
            item.setDate(new Date());
            item.setNumShares(5);
            item.setAccountId("foo");
            item.setPricePerShare(50.0);
            item.setStockSymbol("AAPL");
            item.setAmount(150.0);
            items.add(item);
        }
        /*Sample data ends*/

        return items;
    }
    public List<RevenueItem> getSalesReport(String month, String year) {

		/*
		 * The students code to fetch data from the database will be written here
		 * Query to get sales report for a particular month and year
		 */

        List<RevenueItem> revItems = new ArrayList<RevenueItem>();
    

    
        
                try{
                    
                    int nextYear = Integer.parseInt(year);
                    int nextMonth = Integer.parseInt(month)+1;
                    if(Integer.parseInt(month) == 12){
                        nextYear+=1;
                        nextMonth = 1;
                    }
                    
                    
                    System.out.println(month);
                    System.out.println(year);
                    Class.forName("com.mysql.cj.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://mysql4.cs.stonybrook.edu:3306/bweinger", "bweinger", "111639717");
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("SELECT TR.Id, T.AccountId, T.StockId, TR.PricePerShare, TR.DateTime, TR.Fee, HS.NumShares\n" +
                    "FROM Trade T, Transaction TR, HasStock HS\n" +
                    "WHERE TR.DateTime > CONVERT('"+year+"-"+month+"-00', DATETIME) AND\n" +
                    "TR.DateTime < CONVERT('"+nextYear+"-"+nextMonth+"-00', DATETIME)\n" +
                    "AND T.TransactionId = TR.Id AND HS.AccountId = T.AccountId;");

                    
                    while(rs.next()){
                        RevenueItem rev = new RevenueItem();
                        rev.setAccountId(rs.getString("AccountId"));
                        rev.setAmount(rs.getInt("Fee"));
                        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                        Date date = new Date();
                        date = dateFormat.parse(rs.getString("DateTime"));
                        rev.setDate(date);
                        rev.setNumShares(rs.getInt("NumShares"));
                        rev.setPricePerShare(rs.getInt("PricePerShare"));
                        rev.setStockSymbol(rs.getString("StockId"));
                        
                        revItems.add(rev);
                    }
                    
                }
                catch(Exception e){
                    System.out.println(e);
                }

        return revItems;

       

    }



    public List<RevenueItem> getSummaryListing(String searchKeyword) {

		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of summary listing of revenue generated by a particular stock,
		 * stock type or customer must be implemented
		 * Store the revenue generated by an item in the amount attribute
		 */

        List<RevenueItem> revItems = new ArrayList<RevenueItem>();
       
                try{
                    Class.forName("com.mysql.cj.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://mysql4.cs.stonybrook.edu:3306/bweinger", "bweinger", "111639717");
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("SELECT TR.Id, T.AccountId, T.StockId, TR.PricePerShare, TR.DateTime, TR.Fee, HS.NumShares\n" +
"FROM Transaction TR, Trade T, Stock S, HasStock HS, Account A, Client C, Person P\n" +
"WHERE ((P.LastName LIKE '%" + searchKeyword + "%' OR P.FirstName LIKE '%" + searchKeyword + "%') OR S.Type LIKE '%" + searchKeyword + "%' OR T.StockId LIKE '%" + searchKeyword + "%' OR S.CompanyName LIKE '%" + searchKeyword + "%') AND S.StockSymbol = T.StockId AND TR.ID = T.TransactionId AND HS.StockSymbol = S.StockSymbol AND HS.AccountId = T.AccountId AND A.Id = HS.AccountId AND A.Client = C.Id AND C.Id = P.SSN;");

                    
                    while(rs.next()){
                        RevenueItem rev = new RevenueItem();
                        rev.setAccountId(rs.getString("AccountId"));
                        rev.setAmount(rs.getInt("Fee"));
                        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                        Date date = new Date();
                        date = dateFormat.parse(rs.getString("DateTime"));
                        rev.setDate(date);
                        rev.setNumShares(rs.getInt("NumShares"));
                        rev.setPricePerShare(rs.getInt("PricePerShare"));
                        rev.setStockSymbol(rs.getString("StockId"));
                        
                        revItems.add(rev);
                    }
                    
                }
                catch(Exception e){
                    System.out.println(e);
                }

        return revItems;

    }
}
